"""Pipeline to compute power spectral densities for the biophysical 
simulation of neuropixels recording in the spontaneous regime

Method: 

* Welch method
* Buttwerworth temporal filtering
* entire duration of the recordings

Duration: 5 mins

Usage:

    python src/pipes/validation/psd/multiproc_npx_spont.py
"""

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.filterwarnings("ignore")

import os
import sys
import numpy as np
import spikeinterface as si
from concurrent.futures import ProcessPoolExecutor
import spikeinterface.preprocessing as spre
from scipy import signal
import time 
import yaml
import logging
import logging.config


# move to PROJECT PATH
PROJ_PATH = '/home/steeve/steeve/epfl/code/spikebias/'
os.chdir(PROJ_PATH)

# add custom package to path
sys.path.append('.')

from src.nodes.utils import demean

# setup logging
with open("conf/logging.yml", "r", encoding="utf-8") as logging_conf:
    LOG_CONF = yaml.load(logging_conf, Loader=yaml.FullLoader)
logging.config.dictConfig(LOG_CONF)
logger = logging.getLogger("root")

# setup load paths
RAW_PATH_NS = os.path.join(PROJ_PATH, "dataset/00_raw/recording_npx_spont/")

# setup save paths
RAW_PSD_PATH_NS = os.path.join(PROJ_PATH, "dataset/01_intermediate/psd_raw_npx_spont.npy")

# layers    
layers = ["L1", "L2_3", "L4", "L5", "L6"]
            
# sampling frequency
SF_NS = 40000  # Biophy. spontaneous

# SETUP WELCH PSD PARAMETERS

FILT_WINDOW = "hann"

# neuropixels (Biophy. spontaneous)
FILT_WIND_NS = 40000 # 1Hz resolution
FILT_OVERL_NS = int(
    FILT_WIND_NS // 1.5
)

def get_welch_psd_ns_parallelized(traces: np.ndarray):
    """compute power spectrum density for Marques Silico
    using parallel computing

    Args:
        traces (np.ndarray): timepoints x sites voltage traces

    Returns:
        dict: frequencies x sites powers arraay and frequencies array
    """
    # takes 2 min (instead of 70 min w/o multiprocessing)
    nsites = traces.shape[1]

    # compute power for each site trace
    # in parallel with a pool of workers
    with ProcessPoolExecutor() as executor:
        power_by_site = executor.map(
            get_site_welch_psd_ns,
            traces.T,
            np.arange(0, nsites, 1),
        )
    power_by_sites = list(power_by_site)

    # make an array with powers
    powersd = []
    for site in range(nsites):
        powersd.append(power_by_sites[site][0])
    powers = np.array(powersd)

    # store frequency domain
    freqs = power_by_sites[0][1]
    return {"power": powers, "freq": freqs}


def get_site_welch_psd_ns(trace, site):
    """calculate the welch frequency powers contained in 
    the voltage traces of the Marques-Smith's in vivo dataset

    Args:
        traces (np.ndarray): timepoints x sites voltage trace
        sfreq (_type_): voltage trace sampling frequency
        site: silent, automatically generated by ProcessPoolExecutor()

    Returns:
        _type_: _description_
    """
    (freq, power) = signal.welch(
        trace,
        SF_NS,
        window=FILT_WINDOW,
        nperseg=FILT_WIND_NS,
        noverlap=FILT_OVERL_NS,
    )
    return np.array(power), np.array(freq)


def save_psd(data, write_path:str):
    parent_path = os.path.dirname(write_path)
    if not os.path.isdir(parent_path):
        os.makedirs(parent_path)
    np.save(write_path, data)


def main():

    # Load datasets
    t0 = time.time()

    logger.info(f"Started pipeline..")

    # compress from floats to integers
    RawNS = si.load_extractor(RAW_PATH_NS)
    RawNS = spre.astype(RawNS, "int16")
    
    # Select sites in cortex
    sites_ns = RawNS.get_property("layers")
    sites_ns = [
        "L2_3" if l_i == "L2" or l_i == "L3" else l_i for l_i in sites_ns
    ]
    IN_CTX = np.isin(sites_ns, layers)
    sites_ns = np.where(IN_CTX)[0]
    
    # Remove the DC component by subtracting the means
    raw_traces_ns = demean(RawNS.get_traces()[:, sites_ns])
    logger.info(f"Detrended traces.")
    
    # Calculate psd
    out_raw_ns = get_welch_psd_ns_parallelized(raw_traces_ns)
    logger.info(f"Calculated PSDs.")
    
    # save
    save_psd(out_raw_ns, RAW_PSD_PATH_NS)
    logger.info(f"Completed and saved in {np.round(time.time()-t0,2)} secs")


if __name__== "__main__":
    main()